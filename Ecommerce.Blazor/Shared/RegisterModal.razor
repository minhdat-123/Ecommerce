@using Ecommerce.Blazor.Models
@using Ecommerce.Blazor.Services
@using Microsoft.AspNetCore.Components.Forms

@inject IAuthService AuthService

<div class="modal-backdrop"></div>
<div class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Register</h2>
            <button class="close-button" @onclick="Close">Ã—</button>
        </div>
        <div class="modal-body">
            <EditForm Model="@registerRequest" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="registerRequest.Email" class="form-control" />
                    <ValidationMessage For="@(() => registerRequest.Email)" />
                </div>
                <div class="form-group">
                    <label>Password:</label>
                    <InputText type="password" @bind-Value="registerRequest.Password" class="form-control" />
                    <ValidationMessage For="@(() => registerRequest.Password)" />
                </div>
                 <div class="form-group">
                    <label>Confirm Password:</label>
                    <InputText type="password" @bind-Value="registerRequest.ConfirmPassword" class="form-control" />
                    <ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />
                </div>

                 @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }
                 @if (isSuccess)
                {
                    <div class="alert alert-success" role="alert">
                        Registration successful! Please <button type="button" class="link-button" @onclick="SwitchToLogin">login</button>.
                    </div>
                }

                <div class="button-group">
                     <button type="button" class="cancel-button" @onclick="Close" disabled="@isLoading">Cancel</button>
                    <button type="submit" class="submit-button" disabled="@isLoading">
                         @if(isLoading) { <span>Registering...</span> } else { <span>Register</span> }
                    </button>
                </div>
                 <div class="switch-link">
                    Already have an account? <button type="button" class="link-button" @onclick="SwitchToLogin">Login here</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }

    private RegisterRequest registerRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool isSuccess = false;

    private async Task HandleRegistration()
    {
        isLoading = true;
        isSuccess = false;
        errorMessage = string.Empty;
        try
        {
            var result = await AuthService.RegisterAsync(registerRequest);
            if (result.IsSuccess)
            {
                isSuccess = true;
                // Optionally log the user in automatically after registration:
                // var loginResult = await AuthService.LoginAsync(new LoginRequest { Email = registerRequest.Email, Password = registerRequest.Password });
                // if (loginResult.IsSuccess && !string.IsNullOrEmpty(loginResult.Token)) {
                //     var customAuthStateProvider = (ApiAuthenticationStateProvider)AuthenticationStateProvider;
                //     await customAuthStateProvider.MarkUserAsAuthenticated(loginResult.Token);
                //     NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                //     Close(); 
                // }
            }
            else
            {
                errorMessage = result.Message ?? "Registration failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            Console.WriteLine($"Registration Exception: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private void SwitchToLogin()
    {
        OnSwitchToLogin.InvokeAsync();
    }
} 