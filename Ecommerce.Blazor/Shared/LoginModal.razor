@using Ecommerce.Blazor.Models
@using Ecommerce.Blazor.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms

@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="modal-backdrop"></div>
<div class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Login</h2>
            <button class="close-button" @onclick="Close">Ã—</button>
        </div>
        <div class="modal-body">
            <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Email:</label>
                    <InputText @bind-Value="loginRequest.Email" class="form-control" />
                    <ValidationMessage For="@(() => loginRequest.Email)" />
                </div>
                <div class="form-group">
                    <label>Password:</label>
                    <InputText type="password" @bind-Value="loginRequest.Password" class="form-control" />
                    <ValidationMessage For="@(() => loginRequest.Password)" />
                </div>

                 @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessage
                    </div>
                }

                <div class="button-group">
                    <button type="button" class="cancel-button" @onclick="Close" disabled="@isLoading">Cancel</button>
                    <button type="submit" class="submit-button" disabled="@isLoading">
                        @if(isLoading) { <span>Logging in...</span> } else { <span>Login</span> }
                    </button>
                </div>
                 <div class="switch-link">
                    Don't have an account? <button type="button" class="link-button" @onclick="SwitchToRegister">Register here</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnSwitchToRegister { get; set; }

    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;
        try
        {
            var result = await AuthService.LoginAsync(loginRequest);
            if (result.IsSuccess && !string.IsNullOrEmpty(result.Token))
            {
                // Use the custom state provider to mark as authenticated
                var customAuthStateProvider = (ApiAuthenticationStateProvider)AuthenticationStateProvider;
                await customAuthStateProvider.MarkUserAsAuthenticated(result.Token);
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); // Force reload to update state everywhere
                Close(); // Close modal on success
            }
            else
            {
                errorMessage = result.Message ?? "Invalid login attempt.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login Exception: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI
        }
    }

    private void Close()
    {
        OnClose.InvokeAsync();
    }

    private void SwitchToRegister()
    {
        OnSwitchToRegister.InvokeAsync();
    }
} 