@page "/"
@using Ecommerce.Blazor.Models
@using Ecommerce.Blazor.Services
@using Ecommerce.Blazor.Shared
@using Ecommerce.Blazor
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http
@using System.Text.Json
@using System.Timers
@using Microsoft.AspNetCore.Components.Authorization
@implements IDisposable
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IBrandService BrandService
@inject NavigationManager NavigationManager

<h2>Products</h2>

<div class="search-container">
    <div class="search-box">
        <input type="text" @bind="searchQuery" @bind:event="oninput" @onkeyup="HandleKeyUp" placeholder="Search products..." />
        @if (suggestions.Count > 0 && showSuggestions)
        {
            <div class="suggestions">
                @foreach (var suggestion in suggestions)
                {
                    <div class="suggestion-item" @onclick="() => SelectSuggestion(suggestion)">
                        @suggestion
                    </div>
                }
            </div>
        }
        <button @onclick="Search">Search</button>
        
        <AuthorizeView>
            <Authorized>
                @if (AdminRoleProvider.IsUserAdmin(context.User))
                {
                    <button class="add-product-button" @onclick="OpenAddProductModal">Add Product</button>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>

<div class="product-container">
    <div class="filters">
        <h3>Filters</h3>
        
        <div class="filter-section">
            <h4>Categories</h4>
            <div class="category-selects">
                <select @bind="selectedTopLevelCategoryIdString">
                    <option value="">All Categories</option>
                    @if (topLevelCategories != null)
                    {
                        @foreach (var category in topLevelCategories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </select>

                @if (selectedTopLevelCategoryId.HasValue && subcategories.Any())
                {
                    <select @bind="selectedSubcategoryIdString">
                        <option value="">All Subcategories</option>
                         @foreach (var subcategory in subcategories)
                        {
                            <option value="@subcategory.Id">@subcategory.Name</option>
                        }
                    </select>
                }
            </div>
        </div>
        
        <div class="filter-section">
            <h4>Brands</h4>
             @if (selectedSubcategoryId.HasValue && brands.Any())
            {
                <select @bind="selectedBrandIdString">
                    <option value="">All Brands</option>
                     @foreach (var brand in brands)
                    {
                        <option value="@brand.Id">@brand.Name</option>
                    }
                </select>
            }
            else if (selectedSubcategoryId.HasValue)
            {
                <span>No brands available for this category.</span>
            }
            else
            {
                 <span>Select a subcategory to see brands.</span>
            }
        </div>
        
        <div class="filter-section">
            <h4>Price Range</h4>
            <div class="price-inputs">
                <input type="number" @bind="minPrice" @bind:event="oninput" placeholder="Min" />
                <span>to</span>
                <input type="number" @bind="maxPrice" @bind:event="oninput" placeholder="Max" />
            </div>
            <button @onclick="ApplyPriceFilter">Apply</button>
        </div>
        
        <div class="filter-section">
            <h4>Sort By</h4>
            <select @bind="sortBy">
                <option value="">Default</option>
                <option value="price-asc">Price: Low to High</option>
                <option value="price-desc">Price: High to Low</option>
                <option value="name-asc">Name: A to Z</option>
                <option value="name-desc">Name: Z to A</option>
                <option value="newest">Newest to Oldest</option>
            </select>
        </div>
    </div>
    
    <div class="product-list">
        @if (isLoading)
        {
            <div class="loading">Loading...</div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">@errorMessage</div>
        }
        else if (products.Count == 0)
        {
            <div class="no-results">No products found.</div>
        }
        else
        {
            <div class="products-grid">
                @foreach (var product in products)
                {
                    <div class="product-card" @onclick="() => ViewProductDetails(product.Id)">
                        <div class="product-name">@product.Name</div>
                        <div class="product-description">@product.Description</div>
                        <div class="product-category">@product.CategoryName</div>
                        <div class="product-brand">@product.BrandName</div>
                        <div class="product-price">$@product.Price.ToString("F2")</div>
                    </div>
                }
            </div>
            
            <div class="pagination">
                @if (currentPage > 1)
                {
                    <button @onclick="() => GoToPage(currentPage - 1)" disabled="@isLoading">Previous</button>
                }
                
                <span>Page @currentPage of @totalPages</span>
                <span class="total-items">Total: @totalCount items</span>

                @if (currentPage < totalPages)
                {
                    <button @onclick="() => GoToPage(currentPage + 1)" disabled="@isLoading">Next</button>
                }

                <div class="page-size-selector">
                    <label for="pageSize">Items per page:</label>
                    <select id="pageSize" @bind="pageSize">
                        <option value="5">5</option>
                        <option value="10">10</option>
                        <option value="12">12</option>
                        <option value="20">20</option>
                        <option value="50">50</option>
                    </select>
                </div>
            </div>
        }
    </div>
</div>

@if (showAddProductModal)
{
    <AddProductModal OnClose="CloseAddProductModal" OnProductAdded="ProductAddedHandler" />
}

@code {
    private List<Product> products = new List<Product>();
    private List<Category> topLevelCategories = new List<Category>();
    private List<Category> subcategories = new List<Category>();
    private List<Brand> brands = new List<Brand>();
    private List<string> suggestions = new List<string>();
    private bool showSuggestions = false;
    private bool isLoading = true;
    private bool showAddProductModal = false;
    
    private string? _searchQuery;
    private string searchQuery
    {
        get => _searchQuery ?? "";
        set
        {
            if (_searchQuery != value)
            {
                _searchQuery = value;
                // Debounce logic is handled by HandleKeyUp/FetchSuggestionsAsync
            }
        }
    }
    
    private decimal? _minPrice;
    private decimal? minPrice
    {
        get => _minPrice;
        set
        {
            if (_minPrice != value)
            {
                _minPrice = value;
                // Price filter applied by button click (ApplyPriceFilter -> Search)
            }
        }
    }
    
    private decimal? _maxPrice;
    private decimal? maxPrice
    {
        get => _maxPrice;
        set
        {
            if (_maxPrice != value)
            {
                _maxPrice = value;
                // Price filter applied by button click (ApplyPriceFilter -> Search)
            }
        }
    }
    
    private int? selectedTopLevelCategoryId;
    private int? selectedSubcategoryId;
    private int? selectedBrandId;
    private string _sortBy = "";
    private string sortBy
    {
        get => _sortBy;
        set
        {
            if (_sortBy != value)
            {
                _sortBy = value ?? "";
                 _ = OnSortChangedAsync();
            }
        }
    }
    
    private int currentPage = 1;
    private int _pageSize = 12;
    private int pageSize
    {
        get => _pageSize;
        set
        {
            if (_pageSize != value)
            {
                _pageSize = value;
                _ = OnPageSizeChangedAsync();
            }
        }
    }
    
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling((double)totalCount / pageSize);
    
    private string errorMessage = string.Empty;
    
    private System.Timers.Timer? _debounceTimer;
    private const int DebounceTimeMs = 300;
    
    private string selectedTopLevelCategoryIdString
    {
        get => selectedTopLevelCategoryId?.ToString() ?? "";
        set
        {
            var changed = selectedTopLevelCategoryId?.ToString() != value;
            selectedTopLevelCategoryId = int.TryParse(value, out var id) ? id : null;
            if (changed)
            {
                // Use Task.Run or similar for fire-and-forget is safer, 
                // but simple async void might work here for simplicity if exceptions are handled.
                // Let's try invoking the async method directly and letting Blazor manage state.
                _ = OnTopLevelCategoryChangedAsync(); 
            }
        }
    }

    private string selectedSubcategoryIdString
    {
        get => selectedSubcategoryId?.ToString() ?? "";
        set
        {
            var changed = selectedSubcategoryId?.ToString() != value;
            selectedSubcategoryId = int.TryParse(value, out var id) ? id : null;
             if (changed)
            {
                 _ = OnSubcategoryChangedAsync();
            }
        }
    }

    private string selectedBrandIdString
    {
        get => selectedBrandId?.ToString() ?? "";
        set
        {
            var changed = selectedBrandId?.ToString() != value;
            selectedBrandId = int.TryParse(value, out var id) ? id : null;
            if (changed)
            {
                 _ = OnBrandChangedAsync();
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        InitializeDebounceTimer();
        await LoadTopLevelCategoriesAsync();
        await SearchProductsAsync();
    }
    
    private void InitializeDebounceTimer()
    {
        _debounceTimer = new System.Timers.Timer(DebounceTimeMs);
        _debounceTimer.Elapsed += async (sender, e) => await FetchSuggestionsAsync();
        _debounceTimer.AutoReset = false;
    }
    
    private async Task LoadTopLevelCategoriesAsync()
    {
        try
        {
             topLevelCategories = await CategoryService.GetTopLevelCategoriesAsync() ?? new List<Category>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading top-level categories: {ex.Message}");
            errorMessage = "Could not load categories.";
        }
    }

    private async Task LoadSubcategoriesAsync()
    {
        subcategories.Clear();
        brands.Clear();
        selectedSubcategoryId = null;
        selectedBrandId = null;
        
        StateHasChanged();

        if (selectedTopLevelCategoryId.HasValue)
        {
            isLoading = true;
            errorMessage = string.Empty;
            StateHasChanged();
            try
            {
                var result = await CategoryService.GetSubcategoriesAsync(selectedTopLevelCategoryId.Value);
                subcategories = result ?? new List<Category>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading subcategories: {ex.Message}");
                errorMessage = "Could not load subcategories.";
                subcategories.Clear();
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadBrandsAsync()
    {
        brands.Clear();
        selectedBrandId = null;
        
        if (selectedSubcategoryId.HasValue)
        {
             try
            {
                isLoading = true;
                StateHasChanged();
                brands = await BrandService.GetBrandsByCategoryAsync(selectedSubcategoryId.Value);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading brands: {ex.Message}");
                errorMessage = "Could not load brands.";
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
         else
        {
             StateHasChanged();
        }
    }

    private async Task SearchProductsAsync()
    {
        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            int? categoryIdToSend = selectedSubcategoryId;
            int? parentCategoryIdToSend = selectedSubcategoryId.HasValue ? null : selectedTopLevelCategoryId;

            var response = await ProductService.SearchProductsAsync(
                searchQuery,
                minPrice,
                maxPrice,
                categoryIdToSend,
                parentCategoryIdToSend,
                selectedBrandId,
                sortBy,
                currentPage,
                pageSize);
                
            products = response.Products ?? new List<Product>();
            totalCount = response.TotalCount;
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"API Error searching products: {httpEx.StatusCode} - {httpEx.Message}");
            errorMessage = "Failed to load products due to a network or server issue. Please try again later.";
            products.Clear();
            totalCount = 0;
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"JSON Error searching products: {jsonEx.Message}");
            errorMessage = "Failed to process product data. Please contact support.";
            products.Clear();
            totalCount = 0;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error searching products: {ex.Message}");
            errorMessage = "An unexpected error occurred while loading products.";
            products.Clear();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
             _debounceTimer?.Stop();
            showSuggestions = false;
            await Search();
            return;
        }
        
         _debounceTimer?.Stop();
         _debounceTimer?.Start();
    }
    
    private async Task FetchSuggestionsAsync()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery) && searchQuery.Length >= 2)
        {
            try
            {
                suggestions = await ProductService.GetSuggestionsAsync(searchQuery);
                showSuggestions = suggestions?.Any() ?? false;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching suggestions: {ex.Message}");
                suggestions.Clear();
                showSuggestions = false;
            }
        }
        else
        {
            suggestions.Clear();
            showSuggestions = false;
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SelectSuggestion(string suggestion)
    {
        _debounceTimer?.Stop();
        searchQuery = suggestion;
        showSuggestions = false;
        await Search();
    }
    
    private async Task Search()
    {
        currentPage = 1;
        await SearchProductsAsync();
    }
    
    private async Task ApplyPriceFilter()
    {
        errorMessage = string.Empty;
        await Search();
    }
    
    private async Task OnSortChangedAsync()
    {
        errorMessage = string.Empty; 
        await Search(); 
    }
    
    private async Task GoToPage(int page)
    {
        errorMessage = string.Empty;
        currentPage = page;
        await SearchProductsAsync();
    }
    
    private void ViewProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/product/{productId}");
    }
    
    private async Task OnTopLevelCategoryChangedAsync()
    {
        await LoadSubcategoriesAsync(); 
        await Search(); 
    }

    private async Task OnSubcategoryChangedAsync()
    {
        await LoadBrandsAsync(); 
        await Search(); 
    }

    private async Task OnBrandChangedAsync()
    {
        await Search(); 
    }
    
    private void OpenAddProductModal() => showAddProductModal = true;
    private void CloseAddProductModal() => showAddProductModal = false;

    private async Task ProductAddedHandler(bool added)
    {
        if (added)
        {
            CloseAddProductModal();
            currentPage = 1;
            await SearchProductsAsync();
        }
    }

    private async Task OnPageSizeChangedAsync()
    {
         currentPage = 1; 
         await SearchProductsAsync();
    }

    public void Dispose()
    {
         Dispose(true);
         GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (disposing)
        { 
            _debounceTimer?.Dispose();
            _debounceTimer = null;
        }
    }
}