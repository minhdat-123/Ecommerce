@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Security.Claims

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="app-container">
    <h1>E-commerce Site</h1>
    <nav>
        <ul>
            <li><NavLink href="" Match="NavLinkMatch.All">Products</NavLink></li>
            <!-- Order History link commented out for future use -->
            <!-- <li><NavLink href="orders">Order History</NavLink></li> -->

            <!-- Authentication Links -->
            <AuthorizeView>
                <Authorized>
                     <li class="user-info">
                        @{
                            // Get all claims for debugging
                            DebugOutputAllClaims(context);
                            
                            // Try to get email or name directly from claims
                            var email = context.User.FindFirst("email")?.Value;
                            if (string.IsNullOrEmpty(email))
                            {
                                email = context.User.FindFirst(ClaimTypes.Email)?.Value;
                            }
                            
                            var name = context.User.FindFirst("name")?.Value;
                            if (string.IsNullOrEmpty(name))
                            {
                                name = context.User.FindFirst(ClaimTypes.Name)?.Value;
                            }
                            
                            // If we found an email, use it
                            string displayName = !string.IsNullOrEmpty(email) ? email : 
                                                !string.IsNullOrEmpty(name) ? name : "User";
                        }
                        Welcome, @displayName
                     </li>
                     @* Logout Button - Triggers OIDC logout process *@
                     <li><button class="nav-link-button" @onclick="BeginLogout">Logout</button></li>
                     
                     @* Add Admin links if needed *@
                     <AuthorizeView Roles="Admin" Context="adminContext">
                         <Authorized>
                             <li><NavLink href="/admin/products">Product Management</NavLink></li>
                         </Authorized>
                         <NotAuthorized>
                             @if (HasAdminRole(context))
                             {
                                 <li><span style="color: green">You have Admin role but policy failed</span></li>
                             }
                         </NotAuthorized>
                     </AuthorizeView>
                </Authorized>
                <NotAuthorized>
                    @* Login Button - Triggers OIDC login process *@
                    <li><button class="nav-link-button" @onclick="BeginLogin">Login</button></li>
                    @* Registration usually happens via the Identity Service UI now *@
                    @* <li><button class="nav-link-button" @onclick="OpenRegisterModal">Register</button></li> *@
                </NotAuthorized>
            </AuthorizeView>
        </ul>
    </nav>

    <main>
        @Body
    </main>
</div>

<!-- Remove Modals -->
@* @if (showLoginModal)
{
    <LoginModal OnClose="CloseModals" OnSwitchToRegister="SwitchToRegister" />
}
@if (showRegisterModal)
{
    <RegisterModal OnClose="CloseModals" OnSwitchToLogin="SwitchToLogin" />
} *@

@code {
    private AuthenticationStateProvider _authStateProvider;
    
    [CascadingParameter]
    private Task<AuthenticationState> AuthStateTask { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Execute once when component is initialized
        if (AuthStateTask != null)
        {
            var authState = await AuthStateTask;
            if (authState.User.Identity.IsAuthenticated)
            {
                DebugOutputAllClaims(authState);
            }
        }
    }
    
    // Method to initiate OIDC login
    private void BeginLogin(MouseEventArgs args)
    {
        NavigationManager.NavigateToLogin("authentication/login");
    }

    // Method to initiate OIDC logout
    private void BeginLogout(MouseEventArgs args)
    {
        NavigationManager.NavigateToLogout("authentication/logout");
    }
    
    // Debug helper to output all claims to console
    private void DebugOutputAllClaims(AuthenticationState context)
    {
        try 
        {
            Console.WriteLine("--- User Claims ---");
            foreach (var claim in context.User.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type}, Value: {claim.Value}");
            }
            Console.WriteLine("-------------------");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error outputting claims: {ex.Message}");
        }
    }
    
    // Helper method to check if the user has the Admin role
    private bool HasAdminRole(AuthenticationState context)
    {
        try
        {
            // Check multiple possible role claim formats
            var hasStandardRoleClaim = context.User.HasClaim(c => c.Type == "role" && c.Value == "Admin");
            var hasNetRoleClaim = context.User.HasClaim(c => c.Type == ClaimTypes.Role && c.Value == "Admin");
            var hasRoleFromIsInRole = context.User.IsInRole("Admin");
            
            Console.WriteLine($"Role check - Standard: {hasStandardRoleClaim}, .NET: {hasNetRoleClaim}, IsInRole: {hasRoleFromIsInRole}");
            
            return hasStandardRoleClaim || hasNetRoleClaim || hasRoleFromIsInRole;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking admin role: {ex.Message}");
            return false;
        }
    }
    
    public void Dispose()
    {
        // Cleanup if needed
    }
}