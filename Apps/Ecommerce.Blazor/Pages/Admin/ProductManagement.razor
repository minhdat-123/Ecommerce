@page "/admin/products"
@using Ecommerce.Blazor.Models
@using Ecommerce.Blazor.Services
@using Ecommerce.Blazor
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IBrandService BrandService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
@implements IDisposable

<h2>Product Management</h2>

<div class="admin-container">
    <div class="admin-actions">
        <button @onclick="() => ShowAddProductForm()" class="add-product-btn">Add New Product</button>
        <button @onclick="ReindexProducts" class="reindex-btn">Reindex Products</button>
    </div>
    
    @if (isLoading)
    {
        <div class="loading">Loading...</div>
    }
    else
    {
        @if (showAddForm)
        {
            <div class="product-form">
                <h3>@(editingProduct.Id > 0 ? "Edit" : "Add") Product</h3>
                
                <div class="form-group">
                    <label for="productName">Name:</label>
                    <input id="productName" @bind="editingProduct.Name" required />
                </div>
                
                <div class="form-group">
                    <label for="productDescription">Description:</label>
                    <textarea id="productDescription" @bind="editingProduct.Description" rows="4"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="productPrice">Price:</label>
                    <input id="productPrice" type="number" step="0.01" @bind="editingProduct.Price" required />
                </div>
                
                <div class="form-group">
                    <label for="productCategory">Category:</label>
                    <select id="productCategory" @bind="editingProduct.CategoryId">
                        <option value="0">-- Select Category --</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="productBrand">Brand:</label>
                    <select id="productBrand" @bind="editingProduct.BrandId">
                        <option value="0">-- Select Brand --</option>
                        @foreach (var brand in brands)
                        {
                            <option value="@brand.Id">@brand.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-actions">
                    <button @onclick="SaveProduct" class="save-btn">Save</button>
                    <button @onclick="CancelEdit" class="cancel-btn">Cancel</button>
                </div>
            </div>
        }
        
        <div class="product-list-admin">
            <h3>Products</h3>
            
            @if (products.Count == 0)
            {
                <p>No products found.</p>
            }
            else
            {
                <table class="products-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Price</th>
                            <th>Category</th>
                            <th>Brand</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <tr>
                                <td>@product.Id</td>
                                <td>@product.Name</td>
                                <td>$@product.Price.ToString("F2")</td>
                                <td>@product.CategoryName</td>
                                <td>@product.BrandName</td>
                                <td>
                                    <button @onclick="() => EditProduct(product)" class="edit-btn">Edit</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }
</div>

@code {
    private List<Product> products = new List<Product>();
    private List<Category> categories = new List<Category>();
    private List<Brand> brands = new List<Brand>();
    private Product editingProduct = new Product();
    private bool isLoading = true;
    private bool showAddForm = false;
    private bool isReindexing = false;
    
    private AuthenticationState authState;
    private bool isUserChecked = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is admin
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        Console.WriteLine("Checking admin access to ProductManagement page:");
        
        // Print user's email for debugging
        var email = user.FindFirst(ClaimTypes.Email)?.Value ?? "no email found";
        Console.WriteLine($"User email: {email}");
        
        // Use our custom admin check (static method)
        if (!Ecommerce.Blazor.AdminRoleProvider.IsUserAdmin(user))
        {
            Console.WriteLine("User is not admin, redirecting to home");
            NavigationManager.NavigateTo("/");
            return;
        }
        
        Console.WriteLine("User has admin access, loading data");
        isUserChecked = true;
        await LoadDataAsync();
    }
    
    private async Task LoadDataAsync()
    {
        isLoading = true;
        
        try
        {
            products = await ProductService.GetProductsAsync();
            categories = await CategoryService.GetCategoriesAsync();
            
            // Load brands for the first category as a default
            if (categories.Any())
            {
                var firstCategory = categories.FirstOrDefault(c => c.ParentCategoryId == null);
                if (firstCategory != null)
                {
                    brands = await BrandService.GetBrandsByCategoryAsync(firstCategory.Id);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private void ShowAddProductForm()
    {
        editingProduct = new Product();
        showAddForm = true;
    }
    
    private void EditProduct(Product product)
    {
        editingProduct = new Product
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            CategoryId = product.CategoryId,
            BrandId = product.BrandId
        };
        
        showAddForm = true;
    }
    
    private async Task SaveProduct()
    {
        if (string.IsNullOrWhiteSpace(editingProduct.Name) || editingProduct.Price <= 0 || 
            editingProduct.CategoryId <= 0 || editingProduct.BrandId <= 0)
        {
            // Show validation error
            return;
        }
        
        try
        {
            await ProductService.AddProductAsync(editingProduct);
            showAddForm = false;
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving product: {ex.Message}");
        }
    }
    
    private void CancelEdit()
    {
        showAddForm = false;
    }
    
    private async Task ReindexProducts()
    {
        if (isReindexing)
            return;
            
        isReindexing = true;
        
        try
        {
            await ProductService.IndexProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error reindexing products: {ex.Message}");
        }
        finally
        {
            isReindexing = false;
            StateHasChanged();
        }
    }
    
    // IDisposable implementation
    public void Dispose()
    {
        // Release any resources used by this component
        // Nothing specific to dispose at the moment, but implementation is required by IDisposable
    }
}